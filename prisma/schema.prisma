// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(cuid())
  email        String     @unique
  name         String?
  passwordHash String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  roles        UserRole[]

  formConfirmations      FormConfirmer[] // users assigned as regular confirmers
  formFinalConfirmations FormFinalConfirmer[] // users assigned as final confirmer
  confirmationTasks      ConfirmationTask[] // per-entry tasks for this user
}

model Role {
  id                String                 @id @default(uuid())
  name              String                 @unique
  // existing relations
  users             UserRole[]
  formPermissions   RoleFormPermission[] // ⬅️ your form permissions back-relation
  // NEW back-relation for reports:
  reportPermissions RoleReportPermission[] // ⬅️ add this
}

model UserRole {
  id     String @id @default(cuid())
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId], name: "userId_roleId")
}

model Form {
  id        String   @id @default(uuid())
  code      String   @unique
  titleFa   String
  isActive  Boolean  @default(true)
  sortOrder Int      @default(100)
  version   Int      @default(1) // bump when definition changes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // RBAC
  rolePermissions RoleFormPermission[]

  // Definition (metadata)
  fields FormField[]

  // Entries
  entries FormEntry[]

  confirmers     FormConfirmer[]
  finalConfirmer FormFinalConfirmer?
}

enum FieldType {
  text
  textarea
  number
  date
  datetime
  select
  multiselect
  checkbox
  file
  entryRef        // single reference to another FormEntry
  entryRefMulti   // multiple references
}


model FormField {
  id       String    @id @default(uuid())
  formId   String
  key      String // e.g. "employeeCode"
  labelFa  String
  type     FieldType
  required Boolean   @default(false)
  order    Int       @default(0)
  config   Json? // validation/options per field
  form     Form      @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@unique([formId, key], name: "formId_key")
}

enum EntryStatus {
  draft
  submitted
  confirmed
  finalConfirmed
}

model EntryRelation {
  id             String   @id @default(uuid())
  sourceEntryId  String
  targetEntryId  String
  relation       String   @default("relatesTo") // optional label/category

  source         FormEntry @relation("SourceEntry", fields: [sourceEntryId], references: [id], onDelete: Cascade)
  target         FormEntry @relation("TargetEntry", fields: [targetEntryId], references: [id], onDelete: Cascade)

  createdAt      DateTime @default(now())

  @@unique([sourceEntryId, targetEntryId, relation], name: "source_target_relation_unique")
  @@index([sourceEntryId])
  @@index([targetEntryId])
}

model FormEntry {
  id        String   @id @default(uuid())
  formId    String
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // hybrid payload (answers)
  payload Json

  // snapshot of form definition
  formVersion Int @default(1)

  // workflow timestamps (optional convenience)
  firstConfirmedAt DateTime?
  finalConfirmedAt DateTime?
  status           EntryStatus @default(submitted)

  form  Form               @relation(fields: [formId], references: [id], onDelete: Cascade)
  tasks ConfirmationTask[]

// back-relations:
  outgoingLinks EntryRelation[] @relation("SourceEntry")
  incomingLinks EntryRelation[] @relation("TargetEntry")

  @@index([formId, createdAt])
  @@index([createdBy, createdAt])
}

model FormConfirmer {
  id     String @id @default(uuid())
  formId String
  userId String

  form Form @relation(fields: [formId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([formId, userId], name: "formId_userId")
  @@index([userId])
}

model FormFinalConfirmer {
  id     String @id @default(uuid())
  formId String @unique // one final confirmer per form
  userId String

  form Form @relation(fields: [formId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model RoleFormPermission {
  id     String @id @default(uuid())
  roleId String
  formId String

  canRead         Boolean @default(false) // مشاهده
  canSubmit       Boolean @default(false) // ارسال
  canConfirm      Boolean @default(false) // تأیید کننده
  canFinalConfirm Boolean @default(false) // تأیید کننده نهایی

  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  form Form @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@unique([roleId, formId], name: "roleId_formId")
}

enum ConfirmationStatus {
  pending
  approved
  superseded
}

model ConfirmationTask {
  id          String             @id @default(uuid())
  formEntryId String
  userId      String
  isFinal     Boolean            @default(false)
  status      ConfirmationStatus @default(pending)
  signedAt    DateTime?

  entry FormEntry @relation(fields: [formEntryId], references: [id], onDelete: Cascade)
  user  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isFinal, status])
  @@index([formEntryId, isFinal, status])
}

model Report {
  id        String   @id @default(uuid())
  code      String   @unique
  titleFa   String
  url       String?
  sortOrder Int      @default(100)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // back-relation to RoleReportPermission (you likely already had this)
  rolePermissions RoleReportPermission[]
}

model RoleReportPermission {
  id       String  @id @default(uuid())
  roleId   String
  reportId String
  canView  Boolean @default(false)

  // forward relations with explicit fields/references
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  report Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@unique([roleId, reportId], name: "roleId_reportId")
}

model KardexItem {
  id            String   @id @default(uuid())
  code          String   @unique          // SKU / material code
  nameFa        String
  category      String?                   // optional: "مواد اولیه" / "محصول"
  unit          String?                   // e.g. "کیلوگرم"
  openingQty    Decimal? @db.Decimal(18,3)
  openingValue  Decimal? @db.Decimal(18,2)
  currentQty    Decimal? @db.Decimal(18,3)
  currentValue  Decimal? @db.Decimal(18,2)

  // Optional extra columns from Excel (keep some flexible JSON)
  extra         Json?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}